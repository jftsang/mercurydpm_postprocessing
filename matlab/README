mercurydpm-matlab
=================

This repository contains a suite of MATLAB scripts and functions that are 
useful for the post-processing of data generated by MercuryDPM (as of 
verion 1.0, February 2016).

I also have a number of test files, which are the output of simple 
MercuryDPM runs (specifically, the UnitTests that come with MercuryDPM.)

Files
=====

Functions for loading raw MercuryDPM output:
mercury_load_data - load .data file produced by MercuryDPM
mercury_load_ene - load .ene file produced by MercuryDPM
mercury_load_restart - load a .restart file produced by MercuryDPM

Functions for postprocessing and statistics:
mercury_get_kes - get KEs of individual particles from a 'data' struct as functions of time
mercury_get_kes_from_restart - get KEs of individual particles from a 'restart' struct.
mercury_get_poss_from_restart - get positions of individual particles from a 'restart' struct

Functions for drawing:
mercury_draw_frames - draw some frames from a 'data' struct
mercury_draw_restart - draw the information in a 'restart' struct

Scripts for testing:
mercury_test.m - jmft2's test suite for MercuryDPM-related MATLAB functions
mercury_test_statistics.m - statistics from a .restart file


There is a demonstration of these things in mercury_test. 
In particular, these functions are used to load the output of the demo code
'free_cooling', and my DMD script is used to analyse the history of particles'
kinetic energy.

Design
======

Given the granular group's strategic interests, these functions should 
satisfy the following demands:

 - The code should be able to handle both 2d and 3d output from 
   MercuryDPM, and ideally should be able to distinguish between them 
   automatically. 

 - Likewise, the code should be able to handle output files from MercuryDPM with
   different formatting styles. This is because MercuryDPM's output format is
   different from problem to problem, depending on what properties are important
   (i.e.  depending on what properties are different from the default values).

 - Internally, the code should use the same data structures for 2d as it 
   does for 3d. MercuryDPM does not use the same output format for 2d and 
   3d problems, but it is not that expensive to store an array of zeros 
   for the z-position and z-velocity of particles.

   That said, the suite should retain the distinction between 2d and 3d 
   systems, so that operations involving 2d systems (especially graphics) 
   can be speeded up. 

 - The code should be able to hand polydisperse grains, with dispersity in size
   as well as in material properties (density, coefficients of friction and
   restitution, etc.). 

   Different material properties are called different 'species' in MercuryDPM,
   and it appears that an individual particle is specified by its species and
   its size -- see .restart files.

   Shape dispersity is less important, given that our simulations will involve
   spherical (in 3d) or cylindrical (in 2d) particles anyway.
